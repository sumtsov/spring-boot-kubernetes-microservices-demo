version: '3.8'

services:
  sku:
    build: microservices/sku-service
    image: sku-service
    mem_limit: 512m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy  
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health | grep UP || exit 1"    

  recommendation:
    build: microservices/recommendation-service
    image: recommendation-service
    mem_limit: 512m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy  
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health | grep UP || exit 1"    

  review:
    build: microservices/review-service
    image: review-service
    mem_limit: 512m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      postgres:
        condition: service_healthy  
      kafka:
        condition: service_healthy  
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health | grep UP || exit 1"    

  sku-composite:
    build: microservices/sku-composite-service
    image: sku-composite-service
    mem_limit: 512m
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      sku:
        condition: service_healthy
      review:
        condition: service_healthy
      recommendation:
        condition: service_healthy
      authorization:
        condition: service_healthy
      kafka:
        condition: service_healthy  
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health | grep UP || exit 1"  

  authorization:
    build: microservices/authorization-service
    image: authorization-service
    mem_limit: 512m
    ports:
      - "9999:9999"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health | grep UP || exit 1"             

  mongodb:
    image: mongo:4.4.2
    mem_limit: 512m
    ports:
      - "27017:27017"
    command: mongod
    healthcheck:
      test: "mongo --eval 'db.stats().ok'"
      interval: 5s
      timeout: 2s
      retries: 60

  postgres:
    image: postgres:12.8
    mem_limit: 512m
    ports: 
      - "5432:5432"
    environment:
      POSTGRES_USER: review_db_user
      POSTGRES_PASSWORD: review_db_pass
      POSTGRES_DB: review_db
    healthcheck:
      test: "pg_isready"
      interval: 10s
      timeout: 5s
      retries: 5         

  kafka:
    image: confluentinc/cp-kafka:latest
    ports:
      - 9092:9092 
    container_name: kafka  
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: "kafka-topics --bootstrap-server kafka:29092 --list"

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - 22181:2181 
    container_name: zookeeper  
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:        
      test: "nc -z localhost 2181 || exit -1"      